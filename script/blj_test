#!/bin/bash
##########################################################################
##                                                                       ##
##  This script calls biolockj on all property files in given directory  ##
##                                                                       ##
##  Script requires valid BioLockJ Config file passed as a parameter.    ##
##                                                                       ##
##  Pass optional param "-c" as 1st param to continue after any failure. ##
##  Otherwise exit script if any pipeline fails.                         ##
##                                                                       ##
###########################################################################
. $BLJ/script/blj_functions

SPACER="================================================================================"

# Verify params
[ $# -eq 0 ] &&  echo "Missing required parameter - must pass directory containing BioLockJ Configuration files" && exit 1
[ ! -d "$1" ] && echo "$1 is not a valid directory" && exit 1
[ ! -d "$BLJ_PROJ" ] && echo "Exit program - Required env variable BLJ_PROJ undefined" && exit 1

# Get pipeline status
pipeLineStatus() {
	if [ -f "$1/biolockjComplete" ]; then
    		echo "PASS"
  	elif [ -f "$1/biolockjFailed" ]; then
    		echo "FAIL"
  	else
   		echo "Working"
  	fi
}

# requires 1 parameter --> path to pipeline directory
exitProgram() {
  echo "$SPACER"
  echo "$1/$2 pipelines completed successfully - $(/bin/date)"
  echo "$SPACER"
  exit 1
}

exitOnFailure="exit"
if [ "$#" == 2 ] && [ "$2" == "-x" ]; then
    exitOnFailure="continue"
fi

if [ "$BLJ_PROJ" == "$PWD" ]; then
    echo "Cannot execute blj_test from $BLJ_PROJ"
    exit 1
fi

numExecuted=0
numSuccess=0
pipDir=
echo "BLJ pipeline output directory: $BLJ_PROJ"
echo "Run test suite:  $1"
echo "If pipline failures occur: $exitOnFailure"
pipelineDir=$(most_recent_pipeline)
echo "$SPACER"
echo "Initial Pipeline = $pipelineDir - $(date)"
for f in $1/*; do
  biolockj $f
  count=0
  pipDir="$(most_recent_pipeline)"
  while [ "${count}" -lt 12 -a "$pipDir" == "$pipelineDir" ]; do
    sleep 15
    let "count++"
    pipDir="$(most_recent_pipeline)"
  done
  let "numExecuted++"

  if [ "$pipDir" == "$pipelineDir" ]; then
    echo "Pipeline directory still not created after 60 seconds! Latest is still $pipelineDir --> EXIT SCRIPT!"
    exitProgram $numSuccess $numExecuted
  else
  	pipelineDir="$pipDir"
	  echo "New Pipeline started:  $pipelineDir - $(date)"
  fi
 
  status="$(pipeLineStatus $pipelineDir)"
  count=0

  printf "$status"

  # script times out after 5 hours
  while [ "${count}" -lt 100 ] && [ "$status" == "Working" ]; do
    printf "."
    sleep 180
    let "count++"
    status="$(pipeLineStatus $pipelineDir)"
  done
  echo ""
  if [ "$status" == "PASS" ]; then
    let "numSuccess++"
    echo "PIPELINE SUCCESS --> $f - $(date)"
  else
    if [ "$status" == "Working" ]; then
      echo "PIPELINE TIME-OUT --> $f - $(date)"
    else
      echo "PIPELINE FAILED --> $f - $(date)"
    fi
    if [ "$exitOnFailure" == "exit" ]; then
      exitProgram $numSuccess $numExecuted
    else
      echo "Continue to next project"
	  fi
  fi
done

exitProgram $numSuccess $numExecuted
